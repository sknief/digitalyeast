//     HISTORY PLOT CODE FOLLOWS

//history plot constants
defineConstant("QTL_optima", c(0.0, 20.0));
//

//FITNESS AND PHENOTYPE CODE (to be patched up)
late() {
  for (ind in sim.subpopulations.individuals) {
   // construct phenotypes from additive effects of QTL mutations
     m2muts = ind.genomes.mutationsOfType(m2);
     m3muts = ind.genomes.mutationsOfType(m3);

     if (size(m2muts) == 0){
         phenotype0 = 0.0; }
       else {
         phenotype0 = size(m2muts); }

       if (size(m3muts) == 0){
         phenotype1 = 0.0; }
       else {
         phenotype1 = size(m3muts);}

     ind.setValue("phenotype0", phenotype0);
     ind.setValue("phenotype1", phenotype1);
    //

    // calculate fitness effects
     effect0 = 1.0 + dnorm(QTL_optima[0] - phenotype0, 0.0, 20.0) * 2.0;
     effect1 = 1.0 + dnorm(QTL_optima[1] - phenotype1, 0.0, 20.0) * 2.0;
     ind.fitnessScaling = 80 + effect1 - effect0;
  } //for bracket closes here
} //late() bracket closes here


//HISTORY PLOT CODE + OUTPUT CODE
1:10000 late() {
  // output, run every 1000 generations
    if (sim.generation % 1000 != 0) return;

  // print final phenotypes versus their optima + mean fitness
   inds = sim.subpopulations.individuals;
   p0_mean = mean(inds.getValue("phenotype0"));
   p1_mean = mean(inds.getValue("phenotype1"));
   fit_mean = mean(inds.fitnessScaling);

  // ouput code
   catn();
   catn("Generation: " + sim.generation);
   catn("Mean frequency of deleterious mutations: " + p0_mean + " (" + QTL_optima[0] + ")");
   catn("Mean frequency of beneficial mutations: " + p1_mean + " (" + QTL_optima[1] + ")");
   catn("Mean fitness of population: " + fit_mean);

  //History plot code
   history = sim.getValue("history");
   history = rbind(history, c(p0_mean, p1_mean));
   sim.setValue("history", history);

   //aes data for history plot -> sends data to R
     rstr = paste(c('{',
     'x <- c(' + paste(history[,0], sep=", ") + ')',
     'y <- c(' + paste(history[,1], sep=", ") + ')',
     'quartz(width=4, height=4, type="pdf", file="' + pdfPath + '")',
     'par(mar=c(4.0, 4.0, 1.5, 1.5))',
     'plot(x=c(-10,100), y=c(-10,100), type="n", xlab="x", ylab="y")',
     'points(x=0,y=0,col="red", pch=19, cex=2)',
     'points(x=0,y=80,col="green", pch=19, cex=2)',
     'points(x=x, y=y, col="black", pch=19, cex=0.5)',
     'lines(x=x, y=y)',
     'dev.off()',
     '}'), sep="\n");

     scriptPath = writeTempFile("plot_", ".R", rstr);
     system("/usr/local/bin/Rscript", args=scriptPath);
    //
  //
} //late code closes here

//last bit of history code: maybe try merging with section above?
1 late() {
 sim.setValue("history", matrix(c(0.0, 0.0), nrow=1));
  defineConstant("pdfPath", writeTempFile("plot_", ".pdf", ""));

 if (exists("slimgui"))
  slimgui.openDocument(pdfPath);
}
