//Genetic Modelling Code based on nonWF model, Author: Stella MS Knief

// START COMMANDS - DNI
initialize() {
  initializeSLiMModelType("nonWF");
  initializeSLiMOptions(keepPedigrees=T, dimensionality="xy", periodicity="xy");

  //CONSTANTS TO DEFINE : USER INPUT here
    defineConstant("P", 10); //initial population size
    defineConstant("K", 100); //carrying capacity
    defineConstant("glucose", 0.5); //extracellular glucose
    defineConstant("galactose", 20.0); //High: >25, Low <5, None = 0
    defineConstant("SP", 0.1); //Selective pressure scalar, 0.1 is standard, increase for higher selective pressure
    defineConstant("L", 3); //lethal mutation cutoff number for individual gene binding affinity
     defineConstant("LL", 7); //lethal mutation cutoff number for network function
    defineConstant("CisMu", 1e-5); //mutation rate of cis element
    defineConstant("TransMu", 1e-5); //mutation rate of trans ELEMENTS
    defineConstant("G1Mu", 1e-5); //mutation rate of noncoding regions
    //note: the next three have to add up to 1
    defineConstant("PDelRatio", 0.25); //proportion of deleterious mutations generated in promoter region
    defineConstant("PBenRatio", 0.15); //proportion of beneficial mutations generated in promoter region
    defineConstant("PNeuRatio", 0.6); // proportion of neutral mutations generated in promoter region
    //note: these next three also have to add up to 1
    defineConstant("CDelRatio", 0.25); //proportion of deleterious mutations generated in coding region
    defineConstant("CBenRatio", 0.15); //proportion of beneficial mutations generated in coding region
    defineConstant("CNeuRatio", 0.6); // proportion of neutral mutations generated in coding region




  //Coding Body Follows: No User Input
  ends = c(1999, 2999, 12999,  13999, 23999, 29999, 39999, 45999, 50999, 51999, 61999, 67999, 77999, 78999, 88999, 94999, 99999);
  rates = c(G1Mu, CisMu, G1Mu, CisMu, G1Mu,  TransMu, G1Mu, TransMu, G1Mu, CisMu, G1Mu, TransMu, G1Mu, CisMu, G1Mu, TransMu, G1Mu);
  initializeMutationRate(rates, ends);

  initializeRecombinationRate(1e-8);


  //N mutation type: neutral
  initializeMutationType("m1", 0.5, "f", 0.0);
  m1.color = "yellow";
  m1.convertToSubstitution = T;
  // [CIS] GAL7 deleterious
  initializeMutationType("m2", 0.5, "e", 0.4);
  m2.color = "red";
  // [CIS] GAL7 slightly beneficial
  initializeMutationType("m3", 0.5, "g", 0.5, 1.0);
  m3.color = "green";
  // [CIS] GAL10 deleterious
  initializeMutationType("m4", 0.5, "e", 0.4);
  m4.color = "red";
  // [CIS] GAL10 slightly beneficial
  initializeMutationType("m5", 0.5, "g", 0.5, 1.0);
  m5.color = "green";
  // [TRANS] GAL1 deleterious
  initializeMutationType("m6", 0.5, "e", 0.4);
  m6.color = "pink";
  // [TRANS] GAL1 slightly beneficial
  initializeMutationType("m7", 0.5, "g", 0.5, 1.0);
  m7.color = "lightblue";
  // [TRANS] GAL3 deleterious
  initializeMutationType("m8", 0.5, "e", 0.4);
  m8.color = "pink";
  // [TRANS] GAL3 slightly beneficial
  initializeMutationType("m9", 0.5, "g", 0.5, 1.0);
  m9.color = "lightblue";
  // [CIS] GAL2 deleterious
  initializeMutationType("m10", 0.5, "e", 0.4);
  m10.color = "red";
  // [CIS] GAL2 slightly beneficial
  initializeMutationType("m11", 0.5, "g", 0.5, 1.0);
  m11.color = "green";
  // [TRANS] GAL80 deleterious
  initializeMutationType("m12", 0.5, "e", 0.4);
  m12.color = "pink";
  // [TRANS] GAL80 slightly beneficial
  initializeMutationType("m13", 0.5, "g", 0.5, 1.0);
  m13.color = "lightblue";
  // [CIS] GAL5 deleterious
  initializeMutationType("m14", 0.5, "e", 0.4);
  m14.color = "red";
  // [CIS] GAL5 slightly beneficial
  initializeMutationType("m15", 0.5, "g", 0.5, 1.0);
  m15.color = "green";
  // [TRANS] GAL4 deleterious
  initializeMutationType("m16", 0.5, "e", 0.4);
  m16.color = "pink";
  // [TRANS] GAL4 slightly beneficial
  initializeMutationType("m17", 0.5, "g", 0.5, 1.0);
  m17.color = "lightblue";

  //GENOMIC ELEMENTS
  	initializeGenomicElementType("g1", m1, 1.0); //non-coding
  	initializeGenomicElementType("g2", c(m1, m2, m3), c(PNeuRatio, PDelRatio, PBenRatio)); //GAL7 promoter
  	initializeGenomicElementType("g3", c(m1, m4, m5), c(PNeuRatio, PDelRatio, PBenRatio)); //GAL10 promoter
  	initializeGenomicElementType("g4", c(m1, m6, m7), c(PNeuRatio, PDelRatio, PBenRatio)); //GAL1 promoter
  	initializeGenomicElementType("g5", c(m1, m6, m7), c(CNeuRatio, CDelRatio, CBenRatio)); //GAL1 coding
  	initializeGenomicElementType("g6", c(m1, m8, m9), c(PNeuRatio, PDelRatio, PBenRatio)); //GAL3 promoter
  	initializeGenomicElementType("g7", c(m1, m8, m9), c(CNeuRatio, CDelRatio, CBenRatio)); //GAL3 coding
  	initializeGenomicElementType("g8", c(m1, m10, m11), c(PNeuRatio, PDelRatio, PBenRatio)); //GAL2 promoter
  	initializeGenomicElementType("g9", c(m1, m12, m13), c(PNeuRatio, PDelRatio, PBenRatio)); //GAL80 promoter
  	initializeGenomicElementType("g10", c(m1, m12, m13), c(CNeuRatio, CDelRatio, CBenRatio)); //GAL80 coding
  	initializeGenomicElementType("g11", c(m1, m14, m15), c(PNeuRatio, PDelRatio, PBenRatio)); //GAL5 promoter
  	initializeGenomicElementType("g12", c(m1, m16, m17), c(PNeuRatio, PDelRatio, PBenRatio)); //GAL4 promoter
  	initializeGenomicElementType("g13", c(m1, m16, m17), c(CNeuRatio, CDelRatio, CBenRatio)); //GAL4 coding
 //

 //CHROMOSOME STRUCTURE
    // uniform chromosome of length 100 kb with uniform recombination
    initializeGenomicElement(g1, 0, 1999);
    initializeGenomicElement(g2, 2000, 2999); // GAL 7 promoter
    initializeGenomicElement(g1, 3000, 12999);
    initializeGenomicElement(g3, 13000, 13999);    //GAL 10 promoter
    initializeGenomicElement(g1, 14000, 23999);
    initializeGenomicElement(g4, 24000, 24999);    //GAL 1 promoter
    initializeGenomicElement(g5, 25000, 29999);     // GAL 1 coding
    initializeGenomicElement(g1, 30000, 39999);
    initializeGenomicElement(g6, 40000, 40999);     // GAL 3 promoter
    initializeGenomicElement(g7, 41000, 45999);    // GAL 3 coding
    initializeGenomicElement(g1, 46000, 50999);
    initializeGenomicElement(g8, 51000, 51999);   // GAL 2 promoter
    initializeGenomicElement(g1, 52000, 61999);
    initializeGenomicElement(g9, 62000, 62999); // GAL 80 promoter
    initializeGenomicElement(g10, 63000, 67999);  // GAL 80 coding
    initializeGenomicElement(g1, 68000, 77999);
    initializeGenomicElement(g11, 78000, 78999); // GAL 5 promoter
    initializeGenomicElement(g1, 79000, 88999);
    initializeGenomicElement(g12, 89000, 89999);    //GAL 4 promoter
    initializeGenomicElement(g13, 90000, 94999);     // GAL 4 coding
    initializeGenomicElement(g1, 95000, 99999);

 //COLORCODING CAUSE SLIM DOESNT LIKE THIS MANY ELEMENTS
   // fun fact: slim knows R colors
    g1.color = "darkgrey";
    g2.color = "red";
    g3.color = "firebrick";
    g4.color = "mediumorchid";
    g5.color = "orchid2";
    g6.color = "saddlebrown";
    g7.color = "tan3";
    g8.color = "tomato";
    g9.color = "chartreuse3";
    g10.color = "chartreuse1";
    g11.color = "darkcyan";
    g12.color = "dodgerblue3";
    g13.color = "dodgerblue";
 //

 //CONSTANTS that are NOT changed by the user
 defineConstant("QTL_optima", c(0.0, 20.0));
 defineConstant("S", 0.1);   // sigma_S, the spatial competition width

  // spatial competition
         initializeInteractionType(1, "xy", reciprocal=T, maxDistance=S*3);
         i1.setInteractionFunction("n", 1.0, S);
         // spatial mate choice
         initializeInteractionType(2, "xy", reciprocal=T, maxDistance=0.1);

 //
} //initialize command bracket ends here

//POPULATION CODE
1 early() {
  sim.addSubpop("p1", P);
   p1.individuals.setSpatialPosition(p1.pointUniform(1));
}




//Code in nonWF order now:
// --------------------------------------------------------------------
//reproduction() call backs

  reproduction() {


         // choose our nearest neighbor as a mate, within the max distance
         mate = i2.nearestNeighbors(individual, 1);
         for (i in seqLen(rpois(1, 0.1)))
         {
            if (mate.size())
              offspring = subpop.addCrossed(individual, mate);
else
              offspring = subpop.addSelfed(individual);
            // set offspring position
            pos = individual.spatialPosition + rnorm(2, 0, 0.02);
            offspring.setSpatialPosition(p1.pointPeriodic(pos));
         }

}




//---------------------------------------------------------------------
//mutation() call back and recombination() call backs


//---------------------------------------------------------------------
//early() call backs

     early() {
         i1.evaluate();
         // spatial competition provides density-dependent selection
         inds = p1.individuals;
         competition = i1.totalOfNeighborStrengths(inds);
         competition = (competition + 1) / (2 * PI * S^2);
          inds.fitnessScaling = K / competition;
     }


//-------------------------------------------------------------------
//fitness() call backs

//High glucose levels so mutations dont impact survival
//fitness(NULL){
//  if (glucoseFixed <= 0.5)
//  return 1.0;
//}


//General neutral mutations
fitness(m1) { return 1.0;} //neutral

//GAL Network fitness effects
//GAL 7 promoter
  //deleterious
  fitness(m2) {
     return 1.0 - (sim.mutationFrequencies(p1, mut) * SP);
  }
  //beneficial
  fitness(m3) {
    return 1.0 + (sim.mutationFrequencies(p1, mut) * SP);
  }

//GAL 10 promoter
  //deleterious
  fitness(m4) {
    return 1.0 - (sim.mutationFrequencies(p1, mut) * SP);
  }
  //beneficial
  fitness(m5) {
    return 1.0 + (sim.mutationFrequencies(p1, mut) * SP);
  }

//GAL 1 promoter + coding
  //deleterious
  fitness(m6) {
    return 1.0 - (sim.mutationFrequencies(p1, mut) * SP);
  }
  //beneficial
  fitness(m7) {
    return 1.0 + (sim.mutationFrequencies(p1, mut) * SP);
  }


//GAL 3 promoter + coding
  //deleterious
  fitness(m8) {
      return 1.0 - (sim.mutationFrequencies(p1, mut) * SP);
    }

  //beneficial
  fitness(m9){
    return 1.0 + (sim.mutationFrequencies(p1, mut) * SP);
  }

//GAL 2 promoter
  //deleterious
  fitness(m10) {
    return 1.0 - (sim.mutationFrequencies(p1, mut) * SP );
  }
  //beneficial
  fitness(m11) {
    return 1.0 + (sim.mutationFrequencies(p1, mut) * SP);
  }

//GAL 80 promoter and coding
  //deleterious
  fitness(m12) {
    return 1.0 - (sim.mutationFrequencies(p1, mut) * SP);
  }
  //beneficial
  fitness(m13) {
    return 1.0 + (sim.mutationFrequencies(p1, mut) * SP);
  }

//GAL 5 promoter
  //deleterious
  fitness(m14) {
    return 1.0 - (sim.mutationFrequencies(p1, mut) * SP);
  }
  //beneficial
  fitness(m15) {
    return 1.0 + (sim.mutationFrequencies(p1, mut) * SP);
  }

//GAL 4 promoter + coding
//Gets activated first when glucose is low and galactose is highe
  //deleterious
  fitness(m16) {
    return 1.0 - (sim.mutationFrequencies(p1, mut) * SP);
    }
  //beneficial
  fitness(m17) {
    return 1.0 + (sim.mutationFrequencies(p1, mut) * SP);
  }

//Removed Bad/tagged sampleIndividuals
fitness(NULL) {
  // individuals tagged for death die here
  if (individual.tag == 0) //no lethal condition
   return 1.0;
  else if (individual.tag == 2)  //semi-lethal
   return 0.3;
  else
    return 0.0;  //lethal
  }


//-----------------------------------------------------------------------
//survival/viability call backs
//Survival depends on 1)ENVIRONMENT and 2)NETWORK FUNCTION

// 1) ENVIRONMENT

//IMPACTS OF GALACTOSE
  //High galactose levels
    1:20000 late() {
    if (galactose > 25 )
      p1.fitnessScaling = 0.5;
     else p1.fitnessScaling = 1.0;
    }

  //Normal operation is medium level output (so fitnessScaling = 1.0)

  //Low galactose levels (and low to mid glucose levels by extension)
    1:20000 late() {
    if (galactose < 5 )
      p1.fitnessScaling = 1.5;
      else p1.fitnessScaling = 1.0;
    }

  //No galactose
    late() {
     if (galactose == 0)
      stop("No extracellular galactose detected. Cannot run simulation.");
    }
  //
//

//2) NETWORK STRUCTURE
//tag-based mortality, ie conditional mortality
1:20000 early() {
// initially, everybody lives
  sim.subpopulations.individuals.tag = 0;

for (ind in sim.subpopulations.individuals) {
//Lethal mutations
  //GAL4
  Dgal4 = ind.genomes.mutationsOfType(m16);
  sDgal4 = size(Dgal4);

  Bgal4 = ind.genomes.mutationsOfType(m17);
  sBgal4 = size(Bgal4);

  gal4 = sBgal4 - sDgal4;

  if (gal4  > L) {
      ind.tag = 1;
      catn("GAL4 lethal mutation. Individual " + ind.pedigreeID + " died in generation " + sim.generation); }
  else
    ind.tag = 0;


  //GAL1
  Dgal1 = ind.genomes.mutationsOfType(m6);
  sDgal1 = size(Dgal1);

  Bgal1 = ind.genomes.mutationsOfType(m7);
  sBgal1 = size(Bgal1);

  gal1 = sBgal1 - sDgal1;

  if (gal1  > L) {
      ind.tag = 1;
      catn("GAL1 lethal mutation. Individual " + ind.pedigreeID + " died in generation " + sim.generation); }
  else
    ind.tag = 0;


  //GAL2
  Dgal2 = ind.genomes.mutationsOfType(m10);
  sDgal2 = size(Dgal2);

  Bgal2 = ind.genomes.mutationsOfType(m11);
  sBgal2 = size(Bgal2);

  gal2 = sBgal2 - sDgal2;

    if (gal2  > L) {
      ind.tag = 1;
      catn("GAL2 lethal mutation. Individual " + ind.pedigreeID + " died in generation " + sim.generation); }
    else
      ind.tag = 0;

  //GAL7
  Dgal7 = ind.genomes.mutationsOfType(m2);
  sDgal7 = size(Dgal7);

  Bgal7 = ind.genomes.mutationsOfType(m3);
  sBgal7 = size(Bgal7);

  gal47 = sBgal7 - sDgal7;

    if (gal7  > L) {
      ind.tag = 1;
      catn("GAL7 lethal mutation. Individual " + ind.pedigreeID + " died in generation " + sim.generation); }
    else
      ind.tag = 0;

  //GAL10
  Dgal10 = ind.genomes.mutationsOfType(m4);
  sDgal10 = size(Dgal10);

  Bgal10 = ind.genomes.mutationsOfType(m5);
  sBgal10 = size(Bgal10);

  gal10 = sBgal10 - sDgal10;

  if (gal10  > L) {
    ind.tag = 1;
    catn("GAL10 lethal mutation. Individual " + ind.pedigreeID + " died in generation " + sim.generation); }
  else
    ind.tag = 0;

//SEMI Lethal


//NETWORKFUNCTION
  network = sgal10 + sgal7+ sgal4 + sgal1 + sgal2;

  if (network  > LL) {
    ind.tag = 1;
    catn("Network functionality too low. " + ind.pedigreeID + " died in generation " + sim.generation); }
  else
    ind.tag = 0;




} //for bracket closes here

}


//---------------------------------------------------------------------
//removal of fixed mutations call backs

//HAPLOID CLONAL CODE: REMOVAL OF NEUTRAL MUTATIONS
late() {
  muts = sim.mutationsOfType(m1);
  freqs = sim.mutationFrequencies(NULL, muts);
  if (any(freqs == 0.5))
    sim.subpopulations.genomes.removeMutations(muts[freqs == 0.5], T);
}

//--------------------------------------------------------------------
//other late() call backs

//Callback for if they all die
late() {
if (sum(p1.individualCount) == 0)
 stop("Complete extinction in generation " + sim.generation + ".");
 }


 late() {
         // move around a bit
        for (ind in p1.individuals)
         {
            newPos = ind.spatialPosition + runif(2, -0.01, 0.01);
            ind.setSpatialPosition(p1.pointPeriodic(newPos));
         }
         // then look for mates
         i2.evaluate();
     }





200000 late() {sim.outputFull();}


//     HISTORY PLOT CODE FOLLOWS

//FITNESS AND PHENOTYPE CODE (to be patched up)
//late() {
  //for (ind in sim.subpopulations.individuals) {
   //// construct phenotypes from additive effects of QTL mutations
     //m2muts = ind.genomes.mutationsOfType(m2);
     //m3muts = ind.genomes.mutationsOfType(m3);

    // if (size(m2muts) == 0){
      //   phenotype0 = 0.0; }
       //else {
         //phenotype0 = size(m2muts); }

      // if (size(m3muts) == 0){
        // phenotype1 = 0.0; }
       //else {
         //phenotype1 = size(m3muts);}

     //ind.setValue("phenotype0", phenotype0);
     //ind.setValue("phenotype1", phenotype1);
    //

    // calculate fitness effects
    // effect0 = 1.0 + dnorm(QTL_optima[0] - phenotype0, 0.0, 20.0) * 2.0;
     //effect1 = 1.0 + dnorm(QTL_optima[1] - phenotype1, 0.0, 20.0) * 2.0;
     //ind.fitnessScaling = 80 + effect1 - effect0;
//  } //for bracket closes here
//} //late() bracket closes here


//HISTORY PLOT CODE + OUTPUT CODE
//1:10000 late() {
  // output, run every 1000 generations
  //  if (sim.generation % 1000 != 0) return;

  // print final phenotypes versus their optima + mean fitness
   //inds = sim.subpopulations.individuals;
   //p0_mean = mean(inds.getValue("phenotype0"));
   //p1_mean = mean(inds.getValue("phenotype1"));
   //fit_mean = mean(inds.fitnessScaling);

//  // ouput code
  // catn();
   //catn("Generation: " + sim.generation);
   //catn("Mean frequency of deleterious mutations: " + p0_mean + " (" + QTL_optima[0] + ")");
   //catn("Mean frequency of beneficial mutations: " + p1_mean + " (" + QTL_optima[1] + ")");
   //catn("Mean fitness of population: " + fit_mean);

  //History plot code
   //history = sim.getValue("history");
   //history = rbind(history, c(p0_mean, p1_mean));
   //sim.setValue("history", history);

   //aes data for history plot -> sends data to R
     //rstr = paste(c('{',
     //'x <- c(' + paste(history[,0], sep=", ") + ')',
    // 'y <- c(' + paste(history[,1], sep=", ") + ')',
     //'quartz(width=4, height=4, type="pdf", file="' + pdfPath + '")',
     //'par(mar=c(4.0, 4.0, 1.5, 1.5))',
     //'plot(x=c(-10,100), y=c(-10,100), type="n", xlab="x", ylab="y")',
     //'points(x=0,y=0,col="red", pch=19, cex=2)',
     //'points(x=0,y=80,col="green", pch=19, cex=2)',
     //'points(x=x, y=y, col="black", pch=19, cex=0.5)',
     //'lines(x=x, y=y)',
     //'dev.off()',
    // '}'), sep="\n");

     //scriptPath = writeTempFile("plot_", ".R", rstr);
     //system("/usr/local/bin/Rscript", args=scriptPath);
    //
  //
//} //late code closes here

//last bit of history code: maybe try merging with section above?
//1 late() {
 //sim.setValue("history", matrix(c(0.0, 0.0), nrow=1));
  //defineConstant("pdfPath", writeTempFile("plot_", ".pdf", ""));

// if (exists("slimgui"))
//  slimgui.openDocument(pdfPath);
//}
