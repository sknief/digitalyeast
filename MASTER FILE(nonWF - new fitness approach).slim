//Genetic Modelling Code based on nonWF model, Author: Stella MS Knief

// START COMMANDS - DNI
initialize() {
  initializeSLiMModelType("nonWF");
  defineConstant("K", 500);

  initializeMutationRate(1e-8);
  initializeRecombinationRate(1e-8);

  //ALTERNATIVE MUTATION TYPES AND RATES(SEE NOTES)
  //N mutation type: neutral
  initializeMutationType("m1", 0.5, "f", 0.0);
  m1.color = "yellow";
  // [CIS] GAL7 deleterious
  initializeMutationType("m2", 0.5, "e", 0.4);
  m2.color = "red";
  // [CIS] GAL7 slightly beneficial
  initializeMutationType("m3", 0.5, "g", 0.5, 1.0);
  m3.color = "green";
  // [CIS] GAL10 deleterious
  initializeMutationType("m4", 0.5, "e", 0.4);
  m4.color = "red";
  // [CIS] GAL10 slightly beneficial
  initializeMutationType("m5", 0.5, "g", 0.5, 1.0);
  m5.color = "green";
  // [TRANS] GAL1 deleterious
  initializeMutationType("m6", 0.5, "e", 0.4);
  m6.color = "pink";
  // [TRANS] GAL1 slightly beneficial
  initializeMutationType("m7", 0.5, "g", 0.5, 1.0);
  m7.color = "lightblue";
  // [TRANS] GAL3 deleterious
  initializeMutationType("m8", 0.5, "e", 0.4);
  m8.color = "pink";
  // [TRANS] GAL3 slightly beneficial
  initializeMutationType("m9", 0.5, "g", 0.5, 1.0);
  m9.color = "lightblue";
  // [CIS] GAL2 deleterious
  initializeMutationType("m10", 0.5, "e", 0.4);
  m10.color = "red";
  // [CIS] GAL2 slightly beneficial
  initializeMutationType("m11", 0.5, "g", 0.5, 1.0);
  m11.color = "green";
  // [TRANS] GAL80 deleterious
  initializeMutationType("m12", 0.5, "e", 0.4);
  m12.color = "pink";
  // [TRANS] GAL80 slightly beneficial
  initializeMutationType("m13", 0.5, "g", 0.5, 1.0);
  m13.color = "lightblue";
  // [CIS] GAL5 deleterious
  initializeMutationType("m14", 0.5, "e", 0.4);
  m14.color = "red";
  // [CIS] GAL5 slightly beneficial
  initializeMutationType("m15", 0.5, "g", 0.5, 1.0);
  m15.color = "green";
  // [TRANS] GAL4 deleterious
  initializeMutationType("m16", 0.5, "e", 0.4);
  m16.color = "pink";
  // [TRANS] GAL4 slightly beneficial
  initializeMutationType("m17", 0.5, "g", 0.5, 1.0);
  m17.color = "lightblue";

  //GENOMIC ELEMENTS
  	initializeGenomicElementType("g1", m1, 1.0); //non-coding
  	initializeGenomicElementType("g2", c(m1, m2, m3), c(0.9, 0.05, 0.05)); //GAL7 promoter
  	initializeGenomicElementType("g3", c(m1, m4, m5), c(0.9, 0.05, 0.05)); //GAL10 promoter
  	initializeGenomicElementType("g4", c(m1, m6, m7), c(0.9, 0.05, 0.05)); //GAL1 promoter
  	initializeGenomicElementType("g5", c(m1, m6, m7), c(0.9, 0.05, 0.05)); //GAL1 coding
  	initializeGenomicElementType("g6", c(m1, m8, m9), c(0.9, 0.05, 0.05)); //GAL3 promoter
  	initializeGenomicElementType("g7", c(m1, m8, m9), c(0.9, 0.05, 0.05)); //GAL3 coding
  	initializeGenomicElementType("g8", c(m1, m10, m11), c(0.9, 0.05, 0.05)); //GAL2 promoter
  	initializeGenomicElementType("g9", c(m1, m12, m13), c(0.9, 0.05, 0.05)); //GAL80 promoter
  	initializeGenomicElementType("g10", c(m1, m12, m13), c(0.9, 0.05, 0.05)); //GAL80 coding
  	initializeGenomicElementType("g11", c(m1, m14, m15), c(0.9, 0.05, 0.05)); //GAL5 promoter
  	initializeGenomicElementType("g12", c(m1, m16, m17), c(0.9, 0.05, 0.05)); //GAL4 promoter
  	initializeGenomicElementType("g13", c(m1, m16, m17), c(0.9, 0.05, 0.05)); //GAL4 coding
 //

 //CHROMOSOME STRUCTURE
    // uniform chromosome of length 100 kb with uniform recombination
    initializeGenomicElement(g1, 0, 1999);
    initializeGenomicElement(g2, 2000, 2999); // GAL 7 promoter
    initializeGenomicElement(g1, 3000, 12999);
    initializeGenomicElement(g3, 13000, 13999);    //GAL 10 promoter
    initializeGenomicElement(g1, 14000, 23999);
    initializeGenomicElement(g4, 24000, 24999);    //GAL 1 promoter
    initializeGenomicElement(g5, 25000, 29999);     // GAL 1 coding
    initializeGenomicElement(g1, 30000, 39999);
    initializeGenomicElement(g6, 40000, 40999);     // GAL 3 promoter
    initializeGenomicElement(g7, 41000, 45999);    // GAL 3 coding
    initializeGenomicElement(g1, 46000, 50999);
    initializeGenomicElement(g8, 51000, 51999);   // GAL 2 promoter
    initializeGenomicElement(g1, 52000, 61999);
    initializeGenomicElement(g9, 62000, 62999); // GAL 80 promoter
    initializeGenomicElement(g10, 63000, 67999);  // GAL 80 coding
    initializeGenomicElement(g1, 68000, 77999);
    initializeGenomicElement(g11, 78000, 78999); // GAL 5 promoter
    initializeGenomicElement(g1, 79000, 88999);
    initializeGenomicElement(g12, 89000, 89999);    //GAL 4 promoter
    initializeGenomicElement(g13, 90000, 94999);     // GAL 4 coding
    initializeGenomicElement(g1, 95000, 99999);

 //COLORCODING CAUSE SLIM DOESNT LIKE THIS MANY ELEMENTS
   // fun fact: slim knows R colors
    g1.color = "darkgrey";
    g2.color = "red";
    g3.color = "firebrick";
    g4.color = "mediumorchid";
    g5.color = "orchid2";
    g6.color = "saddlebrown";
    g7.color = "tan3";
    g8.color = "tomato";
    g9.color = "chartreuse3";
    g10.color = "chartreuse1";
    g11.color = "darkcyan";
    g12.color = "dodgerblue3";
    g13.color = "dodgerblue";
 //

 //CONSTANTS AND VALUES
 //FUNCTIONALITY:: step one: environment
 defineConstant("glucoseFixed", 0.5); //fixed version
 glucvar = dnorm(2.0, 0.0, 1.0); //parameters can be changed
 defineConstant("glucoseVar", glucvar); //variable version
 defineConstant("galactose", 20.0); //fixed, but putting it here for future functionality

  defineConstant("QTL_optima", c(0.0, 20.0));
 //
} //initialize command bracket ends here

//POPULATION CODE
1 early() {
  sim.addSubpop("p1", 200);
}

//Code in nonWF order now:
// --------------------------------------------------------------------
//reproduction() call backs

reproduction() {
if (sim.generation % 100 == 0)
  subpop.addCloned(subpop.sampleIndividuals(1));
}

//---------------------------------------------------------------------
//mutation() call back and recombination() call backs


//---------------------------------------------------------------------
//early() call backs


//-------------------------------------------------------------------
//fitness() call backs

//trying to make the fitness dependent on
fitness(m1) { 0.0;} //neutral

fitness(m2) {
  return 1.0 - individual.mutationFrequencies(mut);
}

fitness(m3) {
  return 1.0 + individual.mutationFrequencies(mut);
}

fitness(m4) {
  return 1.0 - individual.mutationFrequencies(mut);
}

fitness(m5) {
  return 1.0 + individual.mutationFrequencies(mut);
}
fitness(m6) {
  return 1.0 - individual.mutationFrequencies(mut);
}

fitness(m7) {
  return 1.0 + individual.mutationFrequencies(mut);
}
fitness(m8) {
  return 1.0 - individual.mutationFrequencies(mut);
}

fitness(m9) {
  return 1.0 + individual.mutationFrequencies(mut);
}
fitness(m10) {
  return 1.0 - individual.mutationFrequencies(mut);
}

fitness(m11) {
  return 1.0 + individual.mutationFrequencies(mut);
}
fitness(m12) {
  return 1.0 - individual.mutationFrequencies(mut);
}

fitness(m13) {
  return 1.0 + individual.mutationFrequencies(mut);
}
fitness(m14) {
  return 1.0 - individual.mutationFrequencies(mut);
}

fitness(m15) {
  return 1.0 + individual.mutationFrequencies(mut);
}

fitness(m16) {
  return 1.0 - individual.mutationFrequencies(mut);
}

fitness(m17) {
  return 1.0 + individual.mutationFrequencies(mut);
}


//-----------------------------------------------------------------------
//survival/viability call backs



//---------------------------------------------------------------------
//removal of fixed mutations call backs

//HAPLOID CLONAL CODE: REMOVAL OF NEUTRAL MUTATIONS
late() {
  muts = sim.mutationsOfType(m1);
  freqs = sim.mutationFrequencies(NULL, muts);
  if (any(freqs == 0.5))
    sim.subpopulations.genomes.removeMutations(muts[freqs == 0.5], T);
}

//--------------------------------------------------------------------
//other late() call backs

//Callback for if they all die
late() {
if (sum(sim.individualCount) == 0)
 stop("Complete extinction in generation " + sim.generation + ".");
 }

//output and means
late() {
  if(sim.generation % 100 == 0) {
    //call back means  (do i have to get rid of the inds?)
    meanGal4 = mean(ind.getValue("Gal4_Binding_Affinity"));
    meanGal1 = mean(ind.getValue("Gal1_Binding_Affinity"));
    meanGal80 = mean(ind.getValue("Gal80_Binding_Affinity"));
    meanGal3 = mean(ind.getValue("Gal3_Binding_Affinity"));
    meanGal2 = mean(ind.getValue("Gal2_Binding_Affinity"));
    meanGal7 = mean(ind.getValue("Gal7_Binding_Affinity"));
    meanGal10 = mean(ind.getValue("Gal10_Binding_Affinity"));
    meanGal5 = mean(ind.getValue("Gal5_Binding_Affinity"));

    network = ((meanGal7 + meanGal10 + meanGal1 + meanGal2 + meanGal3 + meanGal4 + meanGal5 + meanGal80) / 40) * 100;

    catn();
    catn("Mean Gal4 Binding Affinity: " + meanGal4);
    catn("Mean Gal1 Binding Affinity: " + meanGal1);
    catn("Mean Gal80 Binding Affinity: " + meanGal80);
    catn("Mean Gal3 Binding Affinity: " + meanGal3);
    catn("Complex Value: " + leloir);
    catn("Mean Gal2 Binding Affinity: " + meanGal2);
    catn("Mean Gal7 Binding Affinity: " + meanGal7);
    catn("Mean Gal10 Binding Affinity: " + meanGal10);
    catn("Mean Gal5 Binding Affinity: " + meanGal5);
    catn("Mean Network functionality: " + network + "%");
  }

}

//     HISTORY PLOT CODE FOLLOWS

//FITNESS AND PHENOTYPE CODE (to be patched up)
//late() {
  //for (ind in sim.subpopulations.individuals) {
   //// construct phenotypes from additive effects of QTL mutations
     //m2muts = ind.genomes.mutationsOfType(m2);
     //m3muts = ind.genomes.mutationsOfType(m3);

    // if (size(m2muts) == 0){
      //   phenotype0 = 0.0; }
       //else {
         //phenotype0 = size(m2muts); }

      // if (size(m3muts) == 0){
        // phenotype1 = 0.0; }
       //else {
         //phenotype1 = size(m3muts);}

     //ind.setValue("phenotype0", phenotype0);
     //ind.setValue("phenotype1", phenotype1);
    //

    // calculate fitness effects
    // effect0 = 1.0 + dnorm(QTL_optima[0] - phenotype0, 0.0, 20.0) * 2.0;
     //effect1 = 1.0 + dnorm(QTL_optima[1] - phenotype1, 0.0, 20.0) * 2.0;
     //ind.fitnessScaling = 80 + effect1 - effect0;
//  } //for bracket closes here
//} //late() bracket closes here


//HISTORY PLOT CODE + OUTPUT CODE
//1:10000 late() {
  // output, run every 1000 generations
  //  if (sim.generation % 1000 != 0) return;

  // print final phenotypes versus their optima + mean fitness
   //inds = sim.subpopulations.individuals;
   //p0_mean = mean(inds.getValue("phenotype0"));
   //p1_mean = mean(inds.getValue("phenotype1"));
   //fit_mean = mean(inds.fitnessScaling);

//  // ouput code
  // catn();
   //catn("Generation: " + sim.generation);
   //catn("Mean frequency of deleterious mutations: " + p0_mean + " (" + QTL_optima[0] + ")");
   //catn("Mean frequency of beneficial mutations: " + p1_mean + " (" + QTL_optima[1] + ")");
   //catn("Mean fitness of population: " + fit_mean);

  //History plot code
   //history = sim.getValue("history");
   //history = rbind(history, c(p0_mean, p1_mean));
   //sim.setValue("history", history);

   //aes data for history plot -> sends data to R
     //rstr = paste(c('{',
     //'x <- c(' + paste(history[,0], sep=", ") + ')',
    // 'y <- c(' + paste(history[,1], sep=", ") + ')',
     //'quartz(width=4, height=4, type="pdf", file="' + pdfPath + '")',
     //'par(mar=c(4.0, 4.0, 1.5, 1.5))',
     //'plot(x=c(-10,100), y=c(-10,100), type="n", xlab="x", ylab="y")',
     //'points(x=0,y=0,col="red", pch=19, cex=2)',
     //'points(x=0,y=80,col="green", pch=19, cex=2)',
     //'points(x=x, y=y, col="black", pch=19, cex=0.5)',
     //'lines(x=x, y=y)',
     //'dev.off()',
    // '}'), sep="\n");

     //scriptPath = writeTempFile("plot_", ".R", rstr);
     //system("/usr/local/bin/Rscript", args=scriptPath);
    //
  //
//} //late code closes here

//last bit of history code: maybe try merging with section above?
//1 late() {
 //sim.setValue("history", matrix(c(0.0, 0.0), nrow=1));
  //defineConstant("pdfPath", writeTempFile("plot_", ".pdf", ""));

// if (exists("slimgui"))
//  slimgui.openDocument(pdfPath);
//}
