// Tentative Fitness Model based on 1.2.2 and Slim Manual 13.5

// START COMMANDS - DNI
initialize() {
  initializeMutationRate(1e-8);
  initializeRecombinationRate(1e-8);

 //MUTATION TYPES AND RATES
  // N mutation type: neutral
    initializeMutationType("m1", 0.5, "f", 0.0);
    m1.color = "yellow";
  // [CIS] D mutation type: deleterious
    initializeMutationType("m2", 0.5, "e", 0.4);
    m2.convertToSubstitution = F; // to make sure fixed mutations still have an effect
    m2.color = "red";
  // [CIS] B mutation type: slightly beneficial
    initializeMutationType("m3", 0.5, "g", 0.5, 1.0);
    m3.convertToSubstitution = F;
    m3.color = "green";

  // [TRANS] D mutation type: deleterious
    initializeMutationType("m4", 0.5, "e", 0.4);
    m2.convertToSubstitution = F;
    m2.color = "pink";
  // [TRANS] B mutation type: slightly beneficial
    initializeMutationType("m5", 0.5, "g", 0.5, 1.0);
    m3.convertToSubstitution = F;
    m3.color = "lightblue";
  //

  //GENOMIC ELEMENTS
  	initializeGenomicElementType("g1", m1, 1.0); //non-coding
  	initializeGenomicElementType("g2", c(m1, m2, m3), c(0.9, 0.05, 0.05)); //GAL7 promoter
  	initializeGenomicElementType("g3", c(m1, m2, m3), c(0.9, 0.05, 0.05)); //GAL10 promoter
  	initializeGenomicElementType("g4", c(m1, m4, m5), c(0.9, 0.05, 0.05)); //GAL1 promoter
  	initializeGenomicElementType("g5", c(m1, m4, m5), c(0.9, 0.05, 0.05)); //GAL1 coding
  	initializeGenomicElementType("g6", c(m1, m4, m5), c(0.9, 0.05, 0.05)); //GAL3 promoter
  	initializeGenomicElementType("g7", c(m1, m4, m5), c(0.9, 0.05, 0.05)); //GAL3 coding
  	initializeGenomicElementType("g8", c(m1, m2, m3), c(0.9, 0.05, 0.05)); //GAL2 promoter
  	initializeGenomicElementType("g9", c(m1, m4, m5), c(0.9, 0.05, 0.05)); //GAL80 promoter
  	initializeGenomicElementType("g10", c(m1, m4, m5), c(0.9, 0.05, 0.05)); //GAL80 coding
  	initializeGenomicElementType("g11", c(m1, m2, m3), c(0.9, 0.05, 0.05)); //GAL5 promoter
  	initializeGenomicElementType("g12", c(m1, m4, m5), c(0.9, 0.05, 0.05)); //GAL4 promoter
  	initializeGenomicElementType("g13", c(m1, m4, m5), c(0.9, 0.05, 0.05)); //GAL4 coding
 //

 //CHROMOSOME STRUCTURE
    // uniform chromosome of length 100 kb with uniform recombination
    initializeGenomicElement(g1, 0, 1999);
    initializeGenomicElement(g2, 2000, 2999); // GAL 7 promoter
    initializeGenomicElement(g1, 3000, 12999);
    initializeGenomicElement(g3, 13000, 13999);    //GAL 10 promoter
    initializeGenomicElement(g1, 14000, 23999);
    initializeGenomicElement(g4, 24000, 24999);    //GAL 1 promoter
    initializeGenomicElement(g5, 25000, 29999);     // GAL 1 coding
    initializeGenomicElement(g1, 30000, 39999);
    initializeGenomicElement(g6, 40000, 40999);     // GAL 3 promoter
    initializeGenomicElement(g7, 41000, 45999);    // GAL 3 coding
    initializeGenomicElement(g1, 46000, 50999);
    initializeGenomicElement(g8, 51000, 51999);   // GAL 2 promoter
    initializeGenomicElement(g1, 52000, 61999);
    initializeGenomicElement(g9, 62000, 62999); // GAL 80 promoter
    initializeGenomicElement(g10, 63000, 67999);  // GAL 80 coding
    initializeGenomicElement(g1, 68000, 77999);
    initializeGenomicElement(g11, 78000, 78999); // GAL 5 promoter
    initializeGenomicElement(g1, 79000, 88999);
    initializeGenomicElement(g12, 89000, 89999);    //GAL 4 promoter
    initializeGenomicElement(g13, 90000, 94999);     // GAL 4 coding
    initializeGenomicElement(g1, 95000, 99999);

 //COLORCODING CAUSE SLIM DOESNT LIKE THIS MANY ELEMENTS
   // fun fact: slim knows R colors
    g1.color = "darkgrey";
    g2.color = "red";
    g3.color = "firebrick";
    g4.color = "mediumorchid";
    g5.color = "orchid2";
    g6.color = "saddlebrown";
    g7.color = "tan3";
    g8.color = "tomato";
    g9.color = "chartreuse3";
    g10.color = "chartreuse1";
    g11.color = "darkcyan";
    g12.color = "dodgerblue3";
    g13.color = "dodgerblue";
 //

 //CONSTANTS AND VALUES
  defineConstant("QTL_optima", c(0.0, 20.0));
 //
} //initialize command bracket ends here

//POPULATION CODE
1 late() {
  sim.addSubpop("p1", 500);
 // TO BE ADDED: Offspring production
}

//FITNESS AND PHENOTYPE CODE (to be patched up)
late() {
  for (ind in sim.subpopulations.individuals) {
   // construct phenotypes from additive effects of QTL mutations
     m2muts = ind.genomes.mutationsOfType(m2);
     m3muts = ind.genomes.mutationsOfType(m3);

     if (size(m2muts) == 0){
         phenotype0 = 0.0; }
       else {
         phenotype0 = size(m2muts); }

       if (size(m3muts) == 0){
         phenotype1 = 0.0; }
       else {
         phenotype1 = size(m3muts);}

     ind.setValue("phenotype0", phenotype0);
     ind.setValue("phenotype1", phenotype1);
    //

    // calculate fitness effects
     effect0 = 1.0 + dnorm(QTL_optima[0] - phenotype0, 0.0, 20.0) * 2.0;
     effect1 = 1.0 + dnorm(QTL_optima[1] - phenotype1, 0.0, 20.0) * 2.0;
     ind.fitnessScaling = 80 + effect1 - effect0;
  } //for bracket closes here
} //late() bracket closes here


//HISTORY PLOT CODE + OUTPUT CODE
1:10000 late() {
  // output, run every 1000 generations
    if (sim.generation % 1000 != 0) return;

  // print final phenotypes versus their optima + mean fitness
   inds = sim.subpopulations.individuals;
   p0_mean = mean(inds.getValue("phenotype0"));
   p1_mean = mean(inds.getValue("phenotype1"));
   fit_mean = mean(inds.fitnessScaling);

  // ouput code
   catn();
   catn("Generation: " + sim.generation);
   catn("Mean frequency of deleterious mutations: " + p0_mean + " (" + QTL_optima[0] + ")");
   catn("Mean frequency of beneficial mutations: " + p1_mean + " (" + QTL_optima[1] + ")");
   catn("Mean fitness of population: " + fit_mean);

  //History plot code
   history = sim.getValue("history");
   history = rbind(history, c(p0_mean, p1_mean));
   sim.setValue("history", history);

   //aes data for history plot -> sends data to R
     rstr = paste(c('{',
     'x <- c(' + paste(history[,0], sep=", ") + ')',
     'y <- c(' + paste(history[,1], sep=", ") + ')',
     'quartz(width=4, height=4, type="pdf", file="' + pdfPath + '")',
     'par(mar=c(4.0, 4.0, 1.5, 1.5))',
     'plot(x=c(-10,100), y=c(-10,100), type="n", xlab="x", ylab="y")',
     'points(x=0,y=0,col="red", pch=19, cex=2)',
     'points(x=0,y=80,col="green", pch=19, cex=2)',
     'points(x=x, y=y, col="black", pch=19, cex=0.5)',
     'lines(x=x, y=y)',
     'dev.off()',
     '}'), sep="\n");

     scriptPath = writeTempFile("plot_", ".R", rstr);
     system("/usr/local/bin/Rscript", args=scriptPath);
    //
  //
} late code closes here

//last bit of history code: maybe try merging with section above?
1 late() {
 sim.setValue("history", matrix(c(0.0, 0.0), nrow=1));
  defineConstant("pdfPath", writeTempFile("plot_", ".pdf", ""));

 if (exists("slimgui"))
  slimgui.openDocument(pdfPath);
}

//FUNCTIONALITY code
  //step one: environment
    defineConstant("glucoseFixed", 0.5) //fixed version
    glucvar = dnorm(2.0, 0.0, 1.0) //parameters can be changed
    defineConstant("glucoseVar", glucvar //variable version

    defineConstant("galactose", 20.0) //fixed, but putting it here for future functionality

  //step 2: environmental dependence
  if glucosefixed <= 0.5 {
  //network and population fitness will change cause selective pressure is gonna kick in
    //GAL 4 gets activated, first place of activity
    gal4pd = ind.g12.mutationsOfType(m4); //gal 4 promoter deleterious
    gal4pb = ind.g12.mutationsOfType(m5); //gal 4 promoter beneficial
    gal4cd = ind.g13.mutationsOfType(m4); //gal 4 coding deleterious
    gal4cb = ind.g13.mutationsOfType(m5); //gal 4 coding beneficial

    sgal4pd = size(gal4pd); //gal 4 promoter deleterious
    sgal4pb = size(gal4pb); //gal 4 promoter beneficial
    sgal4cd = size(gal4cd); //gal 4 coding deleterious
    sgal4cb = size(gal4cb); //gal 4 coding beneficial

    gal4effect = ((sgal4cd + sgal4cb + sgal4pb + sgal4pd) / 4) + 5;
    ind.setValue = ("Gal4_Binding_Affinity", gal4effect);
    meanGal4 = mean(inds.getValue("Gal4_Binding_Affinity"));

    //bring in mechanism to terminate loop / kill indiv if galeffect is too low (dips below 2); but thats a selection thing
    //also if gal4 effect is 0 -> terminate simulation

    //GAL 4 then interacts with GAL 1
    gal1pd = ind.g4.mutationsOfType(m4); //gal 1 promoter deleterious
    gal1pb = ind.g4.mutationsOfType(m5); //gal 1 promoter beneficial
    gal1cd = ind.g5.mutationsOfType(m4); //gal 1 coding deleterious
    gal1cb = ind.g5.mutationsOfType(m5); //gal 1 coding beneficial

    sgal1pd = size(gal1pd); //gal 1 promoter deleterious
    sgal1pb = size(gal1pb); //gal 1 promoter beneficial
    sgal1cd = size(gal1cd); //gal 1 coding deleterious
    sgal1cb = size(gal1cb); //gal 1 coding beneficial

    gal1effect = (((sgal1cd + sgal1cb + sgal1pb + sgal1pd) / 4) + 5) / (gal4effect / 4);
    ind.setValue = ("Gal1_Binding_Affinity", gal1effect);
    meanGal1 = mean(inds.getValue("Gal1_Binding_Affinity"));

    //GAL 1 then produces GAl80
    gal80pd = ind.g9.mutationsOfType(m4); //gal 80 promoter deleterious
    gal80pb = ind.g9.mutationsOfType(m5); //gal 80 promoter beneficial
    gal80cd = ind.g10.mutationsOfType(m4); //gal 80 coding deleterious
    gal80cb = ind.g10.mutationsOfType(m5); //gal 80 coding beneficial

    sgal80pd = size(gal80pd); //gal 80 promoter deleterious
    sgal80pb = size(gal80pb); //gal 80 promoter beneficial
    sgal80cd = size(gal80cd); //gal 80 coding deleterious
    sgal80cb = size(gal80cb); //gal 80 coding beneficial

    gal80effect = (((sgal80cd + sgal80cb + sgal80pb + sgal80pd) / 4) + 5) / (gal1effect / 4);
    ind.setValue = ("Gal80_Binding_Affinity", gal80effect);
    meanGal80 = mean(inds.getValue("Gal80_Binding_Affinity"));
    //GAL 80 blocks GAL1 but that doesnt really matter? Slash i am assuming glactose to be present

//FIX NUMBERS FROM HERE ON DOWN !!!!!!!! TASK FOR DAYLIGHT

    //Gal3
    if galactose >= 15 { //high galactose
      gal80pd = ind.g9.mutationsOfType(m4); //gal 80 promoter deleterious
      gal80pb = ind.g9.mutationsOfType(m5); //gal 80 promoter beneficial
      gal80cd = ind.g10.mutationsOfType(m4); //gal 80 coding deleterious
      gal80cb = ind.g10.mutationsOfType(m5); //gal 80 coding beneficial

      sgal80pd = size(gal80pd); //gal 80 promoter deleterious
      sgal80pb = size(gal80pb); //gal 80 promoter beneficial
      sgal80cd = size(gal80cd); //gal 80 coding deleterious
      sgal80cb = size(gal80cb); //gal 80 coding beneficial

      gal80effect = ((sgal80cd + sgal80cb + sgal80pb + sgal80pd) / 4) + 5; //doesnt depend on previous genes, high basal levels
      ind.setValue = ("Gal80_Binding_Affinity", gal80effect);
      meanGal80 = mean(inds.getValue("Gal80_Binding_Affinity"));

    else
        catn();
        cat("Not enough substrate present! Simulation ended.");
        sim.simulationFinished();
      //maybe add intermediate code in later versions?
    }

    //Next is GAL1 again technically
      //add selection code here, if sum of 1 80 3 is below value, kill individual
      //otherwise just continue on (else return?)

      leloir = (gal80effect + gal1effect + gal3effect) / 3;
      ind.setValue = ("Complex_Value", leloir);
    //the next genes are for the leloir pathway, these depend on the previous one and gal 1
    //Add code for lethality with selection + offspring updates

    //GAL2
    gal80pd = ind.g9.mutationsOfType(m4); //gal 80 promoter deleterious
    gal80pb = ind.g9.mutationsOfType(m5); //gal 80 promoter beneficial

    gal80effect = (((sgal80cd + sgal80cb ) / 2) + 5) / (leloir / 5);
    ind.setValue = ("Gal80_Binding_Affinity", gal80effect);
    meanGal80 = mean(inds.getValue("Gal80_Binding_Affinity"));

    //GAL1 Gal1 again

    //GAL7
    gal80pd = ind.g9.mutationsOfType(m4); //gal 80 promoter deleterious
    gal80pb = ind.g9.mutationsOfType(m5); //gal 80 promoter beneficial

    gal80effect = (((sgal80cd + sgal80cb ) / 2) + 4) + (gal2effect / 5) / (leloir / 5);
    ind.setValue = ("Gal80_Binding_Affinity", gal80effect);
    meanGal80 = mean(inds.getValue("Gal80_Binding_Affinity"));

    //GAL 10
    gal80pd = ind.g9.mutationsOfType(m4); //gal 80 promoter deleterious
    gal80pb = ind.g9.mutationsOfType(m5); //gal 80 promoter beneficial

  gal80effect = (((sgal80cd + sgal80cb ) / 2) + 4) + (gal7effect / 5) / (leloir / 5);
    ind.setValue = ("Gal80_Binding_Affinity", gal80effect);
    meanGal80 = mean(inds.getValue("Gal80_Binding_Affinity"));

    //GAL5

    gal80pd = ind.g9.mutationsOfType(m4); //gal 80 promoter deleterious
    gal80pb = ind.g9.mutationsOfType(m5); //gal 80 promoter beneficial

  gal80effect = (((sgal80cd + sgal80cb ) / 2) + 4) + (gal10effect / 5) / (leloir / 5);
    ind.setValue = ("Gal80_Binding_Affinity", gal80effect);
    meanGal80 = mean(inds.getValue("Gal80_Binding_Affinity"));

    //Finally, total network function is the sum of all of the above,
      //to be defined tmrw


  //ouput code for above network functionality: UPDATE!!!
    catn();
    catn("Mean Gal4 Binding Affinity: " + meanGal4);
    catn("Mean Gal1 Binding Affinity: " + meanGal1);
  }
  else {
    catn();
    catn("Great Conditions! No competition and no selective pressure");
  //normal offspring generation code, no selection and no mortality
  }
