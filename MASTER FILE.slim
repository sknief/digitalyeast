// Tentative Fitness Model based on 1.2.2 and Slim Manual 13.5

// START COMMANDS - DNI
// set up a simple neutral simulation
initialize() {
initializeMutationRate(1e-8);

//MUTATION TYPES AND RATES
//remember: the formula is ("name", dominance, "distribution", coefficient for distribution)
  // N mutation type: neutral
    initializeMutationType("m1", 0.5, "f", 0.0);
    m1.color = "yellow";
  // [CIS] D mutation type: deleterious
    initializeMutationType("m2", 0.5, "e", 0.4);
    m2.convertToSubstitution = F; // to make sure fixed mutations still have an effect
    m2.color = "red";
  // [CIS] B mutation type: slightly beneficial
    initializeMutationType("m3", 0.5, "g", 0.5, 1.0);
    m3.convertToSubstitution = F;
    m3.color = "green";
  // [TRANS] D mutation type: deleterious
    initializeMutationType("m4", 0.5, "e", 0.4);
    m2.convertToSubstitution = F;
    m2.color = "pink";
  // [TRANS] B mutation type: slightly beneficial
    initializeMutationType("m5", 0.5, "g", 0.5, 1.0);
    m3.convertToSubstitution = F;
    m3.color = "lightblue";

    //GENOME STRUCTURE
  	initializeGenomicElementType("g1", m1, 1.0); //non-coding
  	initializeGenomicElementType("g2", c(m1, m2, m3), c(0.9, 0.05, 0.05)); //GAL7 promoter
  	initializeGenomicElementType("g3", c(m1, m2, m3), c(0.9, 0.05, 0.05)); //GAL10 promoter
  	initializeGenomicElementType("g4", c(m1, m4, m5), c(0.9, 0.05, 0.05)); //GAL1 promoter
  	initializeGenomicElementType("g5", c(m1, m4, m5), c(0.9, 0.05, 0.05)); //GAL1 coding
  	initializeGenomicElementType("g6", c(m1, m4, m5), c(0.9, 0.05, 0.05)); //GAL3 promoter
  	initializeGenomicElementType("g7", c(m1, m4, m5), c(0.9, 0.05, 0.05)); //GAL3 coding
  	initializeGenomicElementType("g8", c(m1, m2, m3), c(0.9, 0.05, 0.05)); //GAL2 promoter
  	initializeGenomicElementType("g9", c(m1, m4, m5), c(0.9, 0.05, 0.05)); //GAL80 promoter
  	initializeGenomicElementType("g10", c(m1, m4, m5), c(0.9, 0.05, 0.05)); //GAL80 coding
  	initializeGenomicElementType("g11", c(m1, m2, m3), c(0.9, 0.05, 0.05)); //GAL5 promoter
  	initializeGenomicElementType("g12", c(m1, m4, m5), c(0.9, 0.05, 0.05)); //GAL4 promoter
  	initializeGenomicElementType("g13", c(m1, m4, m5), c(0.9, 0.05, 0.05)); //GAL4 coding

    //CHROMOSOME STRUCTURE
    // uniform chromosome of length 100 kb with uniform recombination
    initializeGenomicElement(g1, 0, 1999);
    initializeGenomicElement(g2, 2000, 2999); // GAL 7 promoter
    initializeGenomicElement(g1, 3000, 12999);
    initializeGenomicElement(g3, 13000, 13999);    //GAL 10 promoter
    initializeGenomicElement(g1, 14000, 23999);
    initializeGenomicElement(g4, 24000, 24999);    //GAL 1 promoter
    initializeGenomicElement(g5, 25000, 29999);     // GAL 1 coding
    initializeGenomicElement(g1, 30000, 39999);
    initializeGenomicElement(g6, 40000, 40999);     // GAL 3 promoter
    initializeGenomicElement(g7, 41000, 45999);    // GAL 3 coding
    initializeGenomicElement(g1, 46000, 50999);
    initializeGenomicElement(g8, 51000, 51999);   // GAL 2 promoter
    initializeGenomicElement(g1, 52000, 61999);
    initializeGenomicElement(g9, 62000, 62999); // GAL 80 promoter
    initializeGenomicElement(g10, 63000, 67999);  // GAL 80 coding
    initializeGenomicElement(g1, 68000, 77999);
    initializeGenomicElement(g11, 78000, 78999); // GAL 5 promoter
    initializeGenomicElement(g1, 79000, 88999);
    initializeGenomicElement(g12, 89000, 89999);    //GAL 4 promoter
    initializeGenomicElement(g13, 90000, 94999);     // GAL 4 coding
    initializeGenomicElement(g1, 95000, 99999);

    //COLORCODING CAUSE SLIM DOESNT LIKE THIS MANY ELEMENTS
    // fun fact: slim knows R colors
    g1.color = "darkgrey";
    g2.color = "red";
    g3.color = "firebrick";
    g4.color = "mediumorchid";
    g5.color = "orchid2";
    g6.color = "saddlebrown";
    g7.color = "tan3";
    g8.color = "tomato";
    g9.color = "chartreuse3";
    g10.color = "chartreuse1";
    g11.color = "darkcyan";
    g12.color = "dodgerblue3";
    g13.color = "dodgerblue";

initializeRecombinationRate(1e-8);

defineConstant("QTL_optima", c(0.0, 20.0));
}

1 late() {
sim.addSubpop("p1", 500);
}



//NEWLY WRITTEN EXPERIMENTAL CODE
late() {
for (ind in sim.subpopulations.individuals)
 {
 // construct phenotypes from additive effects of QTL mutations
 m2muts = ind.genomes.mutationsOfType(m2);
 m3muts = ind.genomes.mutationsOfType(m3);

 if (size(m2muts) == 0){
     phenotype0 = 0.0; }
   else {
     phenotype0 = size(m2muts); }

   if (size(m3muts) == 0){
     phenotype1 = 0.0; }
   else {
     phenotype1 = size(m3muts);}

   ind.setValue("phenotype0", phenotype0);
   ind.setValue("phenotype1", phenotype1);


 // calculate fitness effects
 effect0 = 1.0 + dnorm(QTL_optima[0] - phenotype0, 0.0, 20.0) * 2.0;
 effect1 = 1.0 + dnorm(QTL_optima[1] - phenotype1, 0.0, 20.0) * 2.0;
 ind.fitnessScaling = 80 + effect1 - effect0;
 }
}
//now comes the real fucked bit

1:10000 late() {
// output, run every 1000 generations
if (sim.generation % 1000 != 0)
 return;

// print final phenotypes versus their optima
 inds = sim.subpopulations.individuals;
 p0_mean = mean(inds.getValue("phenotype0"));
 p1_mean = mean(inds.getValue("phenotype1"));
 fit_mean = mean(inds.fitnessScaling);

 catn();
 catn("Generation: " + sim.generation);
 catn("Mean frequency of deleterious mutations: " + p0_mean + " (" + QTL_optima[0] + ")");
 catn("Mean frequency of beneficial mutations: " + p1_mean + " (" + QTL_optima[1] + ")");
 catn("Mean fitness of population: " + fit_mean);

//update our plot
 history = sim.getValue("history");
 history = rbind(history, c(p0_mean, p1_mean)); //refers to values in line 80
 sim.setValue("history", history);

//aes data
 rstr = paste(c('{',
 'x <- c(' + paste(history[,0], sep=", ") + ')',
 'y <- c(' + paste(history[,1], sep=", ") + ')',
 'quartz(width=4, height=4, type="pdf", file="' + pdfPath + '")',
 'par(mar=c(4.0, 4.0, 1.5, 1.5))',
 'plot(x=c(-10,100), y=c(-10,100), type="n", xlab="x", ylab="y")',
 'points(x=0,y=0,col="red", pch=19, cex=2)',
 'points(x=0,y=80,col="green", pch=19, cex=2)',
 'points(x=x, y=y, col="black", pch=19, cex=0.5)',
 'lines(x=x, y=y)',
 'dev.off()',
 '}'), sep="\n");

 scriptPath = writeTempFile("plot_", ".R", rstr);
 system("/usr/local/bin/Rscript", args=scriptPath); //do i need to



// we are done with the main adaptive walk; print final output

//output? what output?

 //sim.simulationFinished();
 }

//last bit of pdf work
 1 late() {
 sim.setValue("history", matrix(c(0.0, 0.0), nrow=1));
  defineConstant("pdfPath", writeTempFile("plot_", ".pdf", ""));

 // If we're running in SLiMgui, open a plot window
 if (exists("slimgui"))
  slimgui.openDocument(pdfPath);
 }
